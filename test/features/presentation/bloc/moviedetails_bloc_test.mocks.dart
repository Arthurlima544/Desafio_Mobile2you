// Mocks generated by Mockito 5.0.15 from annotations
// in app_movie/test/features/presentation/bloc/moviedetails_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:app_movie/core/error/Failures.dart/failure.dart' as _i7;
import 'package:app_movie/core/utils/parameters.dart' as _i9;
import 'package:app_movie/core/utils/SimilarParameters.dart' as _i12;
import 'package:app_movie/features/domain/entities/movie.dart' as _i8;
import 'package:app_movie/features/domain/entities/SimilarMovies.dart' as _i11;
import 'package:app_movie/features/domain/repository/MovieDetailsRepository.dart'
    as _i2;
import 'package:app_movie/features/domain/repository/SimilarMovieRepository.dart'
    as _i4;
import 'package:app_movie/features/domain/usecases/GetMovieDetailsUsecase.dart'
    as _i5;
import 'package:app_movie/features/domain/usecases/GetSimilarMovieUsecase.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeMovieDetailsRepository_0 extends _i1.Fake
    implements _i2.MovieDetailsRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeSimilarMovieRepository_2 extends _i1.Fake
    implements _i4.SimilarMovieRepository {}

/// A class which mocks [GetMovieDetails].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetails extends _i1.Mock implements _i5.GetMovieDetails {
  MockGetMovieDetails() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieDetailsRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeMovieDetailsRepository_0())
          as _i2.MovieDetailsRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.Movie>> call(_i9.Parameters? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i7.Failure, _i8.Movie>>.value(
                  _FakeEither_1<_i7.Failure, _i8.Movie>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i8.Movie>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [GetSimilarMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSimilarMovies extends _i1.Mock implements _i10.GetSimilarMovies {
  MockGetSimilarMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SimilarMovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
              returnValue: _FakeSimilarMovieRepository_2())
          as _i4.SimilarMovieRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i11.SimilarMovies>> call(
          _i12.SimilarMovieParameters? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue:
                  Future<_i3.Either<_i7.Failure, _i11.SimilarMovies>>.value(
                      _FakeEither_1<_i7.Failure, _i11.SimilarMovies>()))
          as _i6.Future<_i3.Either<_i7.Failure, _i11.SimilarMovies>>);
  @override
  String toString() => super.toString();
}
